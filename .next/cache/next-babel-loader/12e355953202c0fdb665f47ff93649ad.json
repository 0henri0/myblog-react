{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport axios from 'axios';\nconst DEFAULT_CONFIG = {\n  baseURL: process.env.REACT_APP_URL_API,\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest'\n  }\n};\nexport const statusCode = {\n  OK: 200,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  INTERNAL_SERVER_ERROR: 500\n};\nexport default class Http {\n  constructor(config = {}) {\n    this.config = _Object$assign({}, DEFAULT_CONFIG, config);\n  }\n\n  authenticated() {\n    const storedData = localStorage.getItem('access_token'); // get token from localstorage\n\n    if (storedData) {\n      this.config.headers['Authorization'] = 'Bearer ' + storedData;\n    }\n\n    return this;\n  }\n\n  get(url, params, config = {}) {\n    return this.executeRequest(url, _objectSpread({}, config, {\n      params\n    }));\n  }\n\n  post(url, data, config = {}) {\n    return this.executeRequest(url, _objectSpread({\n      method: 'post'\n    }, config, {\n      data\n    }));\n  }\n\n  patch(url, data, config = {}) {\n    return this.executeRequest(url, _objectSpread({\n      method: 'patch'\n    }, config, {\n      data\n    }));\n  }\n\n  put(url, data, config = {}) {\n    return this.executeRequest(url, _objectSpread({\n      method: 'put'\n    }, config, {\n      data\n    }));\n  }\n\n  delete(url, data, config = {}) {\n    return this.executeRequest(url, _objectSpread({\n      method: 'delete'\n    }, config, {\n      data\n    }));\n  }\n\n  executeRequest(url, config) {\n    const finalHeaderConfig = _objectSpread({}, this.config.headers, config.headers);\n\n    const finalConfig = _objectSpread({}, this.config, {\n      url\n    }, config, {\n      headers: _objectSpread({}, finalHeaderConfig)\n    });\n\n    console.log(finalConfig);\n    return axios.request(finalConfig).then(response => {\n      return _Promise.resolve(response);\n    }).catch(error => {\n      if (error.response && error.response.status === statusCode.UNAUTHORIZED) {\n        if (url != 'login') {\n          window.location.href = '/login';\n        }\n      }\n\n      return _Promise.reject(error);\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}